{"type":"Program","body":[{"type":"ImportDeclaration","specifiers":[{"type":"ImportSpecifier","local":{"type":"Identifier","name":"maxProductOfThree"},"imported":{"type":"Identifier","name":"maxProductOfThree"}}],"source":{"type":"Literal","value":"../MaxProductOfThree","raw":"'../MaxProductOfThree'"}},{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"Identifier","name":"describe"},"arguments":[{"type":"Literal","value":"MaxProductOfThree","raw":"'MaxProductOfThree'"},{"type":"ArrowFunctionExpression","id":null,"params":[],"body":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"Identifier","name":"it"},"arguments":[{"type":"Literal","value":"expects to throw error for array with only 2 numbers","raw":"'expects to throw error for array with only 2 numbers'"},{"type":"ArrowFunctionExpression","id":null,"params":[],"body":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"CallExpression","callee":{"type":"Identifier","name":"expect"},"arguments":[{"type":"ArrowFunctionExpression","id":null,"params":[],"body":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"Identifier","name":"maxProductOfThree"},"arguments":[{"type":"ArrayExpression","elements":[{"type":"Literal","value":1,"raw":"1"},{"type":"Literal","value":3,"raw":"3"}]}]}}]},"generator":false,"expression":false,"async":false}]},"property":{"type":"Identifier","name":"toThrow"}},"arguments":[{"type":"Literal","value":"Triplet cannot exist with the given array","raw":"'Triplet cannot exist with the given array'"}]}}]},"generator":false,"expression":false,"async":false}]}},{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"Identifier","name":"it"},"arguments":[{"type":"Literal","value":"expects to return 300 as the maximum product","raw":"'expects to return 300 as the maximum product'"},{"type":"ArrowFunctionExpression","id":null,"params":[],"body":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"CallExpression","callee":{"type":"Identifier","name":"expect"},"arguments":[{"type":"CallExpression","callee":{"type":"Identifier","name":"maxProductOfThree"},"arguments":[{"type":"ArrayExpression","elements":[{"type":"Literal","value":10,"raw":"10"},{"type":"Literal","value":6,"raw":"6"},{"type":"Literal","value":5,"raw":"5"},{"type":"Literal","value":3,"raw":"3"},{"type":"Literal","value":1,"raw":"1"},{"type":"UnaryExpression","operator":"-","argument":{"type":"Literal","value":10,"raw":"10"},"prefix":true}]}]}]},"property":{"type":"Identifier","name":"toBe"}},"arguments":[{"type":"Literal","value":300,"raw":"300"}]}}]},"generator":false,"expression":false,"async":false}]}},{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"Identifier","name":"it"},"arguments":[{"type":"Literal","value":"expects to return 300 as the maximum product","raw":"'expects to return 300 as the maximum product'"},{"type":"ArrowFunctionExpression","id":null,"params":[],"body":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"CallExpression","callee":{"type":"Identifier","name":"expect"},"arguments":[{"type":"CallExpression","callee":{"type":"Identifier","name":"maxProductOfThree"},"arguments":[{"type":"ArrayExpression","elements":[{"type":"Literal","value":10,"raw":"10"},{"type":"UnaryExpression","operator":"-","argument":{"type":"Literal","value":6,"raw":"6"},"prefix":true},{"type":"Literal","value":5,"raw":"5"},{"type":"Literal","value":3,"raw":"3"},{"type":"Literal","value":1,"raw":"1"},{"type":"UnaryExpression","operator":"-","argument":{"type":"Literal","value":10,"raw":"10"},"prefix":true}]}]}]},"property":{"type":"Identifier","name":"toBe"}},"arguments":[{"type":"Literal","value":600,"raw":"600"}]}}]},"generator":false,"expression":false,"async":false}]}}]},"generator":false,"expression":false,"async":false}]}}],"sourceType":"module"}